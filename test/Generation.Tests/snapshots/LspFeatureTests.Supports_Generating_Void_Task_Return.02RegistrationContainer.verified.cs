//HintName: RegistrationContainer.cs
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated a code generator.
// </auto-generated>
// ------------------------------------------------------------------------------
using MediatR;
using OmniSharp.Extensions.JsonRpc;
using OmniSharp.Extensions.JsonRpc.Generation;
using OmniSharp.Extensions.LanguageServer.Protocol;
using OmniSharp.Extensions.LanguageServer.Protocol.Client;
using OmniSharp.Extensions.LanguageServer.Protocol.Client.Capabilities;
using OmniSharp.Extensions.LanguageServer.Protocol.Generation;
using OmniSharp.Extensions.LanguageServer.Protocol.Models;
using OmniSharp.Extensions.LanguageServer.Protocol.Serialization;
using OmniSharp.Extensions.LanguageServer.Protocol.Server;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Immutable;
using System.Linq;

#nullable enable
namespace Lsp.Tests.Integration.Fixtures
{
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, System.Runtime.CompilerServices.CompilerGeneratedAttribute]
    public partial class RegistrationContainer : ContainerBase<Registration>
    {
        public RegistrationContainer() : this(Enumerable.Empty<Registration>())
        {
        }

        public RegistrationContainer(IEnumerable<Registration> items) : base(items)
        {
        }

        public RegistrationContainer(params Registration[] items) : base(items)
        {
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static RegistrationContainer? From(IEnumerable<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static implicit operator RegistrationContainer? (Registration[] items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static RegistrationContainer? From(params Registration[] items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static implicit operator RegistrationContainer? (Collection<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static RegistrationContainer? From(Collection<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static implicit operator RegistrationContainer? (List<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static RegistrationContainer? From(List<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static implicit operator RegistrationContainer? (in ImmutableArray<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static RegistrationContainer? From(in ImmutableArray<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static implicit operator RegistrationContainer? (ImmutableList<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("items")]
        public static RegistrationContainer? From(ImmutableList<Registration>? items) => items switch
        {
            not null => new RegistrationContainer(items),
            _ => null
        };
    }
}
#nullable restore
